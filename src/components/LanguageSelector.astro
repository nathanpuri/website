---
import i18next from "i18next";
import { localizePath } from "astro-i18next";
import ISO6991 from "iso-639-1";

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const lngs = supportedLanguages as [];
// ensure the current selection matches the page's language
const sortedLngs = lngs.sort((a) => {
  return a === currentLanguage ? -1 : 1;
});

const { ...attributes } = Astro.props;
---

<script>
  const LS_SELECTED_LOCALE = "selectedLocale";

  function setCurrentSelection() {
    const savedLocale = localStorage.getItem(LS_SELECTED_LOCALE);
    const pageLocale = getPageLocale();

    if (pageLocale !== savedLocale) {
      // update the saved locale
      localStorage.setItem(LS_SELECTED_LOCALE, pageLocale);
    } 

    // ensure correct option is selected
    setSelectedOption(pageLocale);
  }

  function getOptionMatchingLocale(locale) {
    const options = document.querySelectorAll("#language-selector > option");
    let option = null;

    for (let i = 0; i < options.length; i++) {
      const o = options[i];
      const optionVal = o.value;
      const localeSubstr = optionVal.substring(1, 3);

      if (localeSubstr.includes(locale)) {
        option = o;
      }
    }

    return option
  }

  function setSelectedOption(locale) {
    // remove the currently selected
    const currSelected = document.querySelector(
      "#language-selector > option[selected]"
    );

    if (currSelected) {
      currSelected.removeAttribute("selected");
    }

    const option = getOptionMatchingLocale(locale);

    if (option) {
      option.setAttribute("selected", "");
    }
  }

  function getPageLocale() {
    const pathname = window.location.pathname;
    const locale = pathname.match(/\/(\w{2})\/.+/)[1];

    if (locale) {
      return locale;
    }

    return null;
  }

  const onSelectChangeHandler = (ev) => {
    const val = ev?.target?.value;

    if (val) {
      const locale = val.match(/\/(\w{2})\/.+/)[1];
      localStorage.setItem(LS_SELECTED_LOCALE, locale);
      window.location = val;
    }
  };

  setCurrentSelection();

  document
    .getElementById("language-selector")
    .addEventListener("change", onSelectChangeHandler);
</script>

<select {...attributes} id="language-selector" aria-label={i18next.t("languageSelect")}>
  {
    sortedLngs.map((supportedLanguage: string) => {
      let value = localizePath(pathname, supportedLanguage);
      const nativeName = ISO6991.getNativeName(supportedLanguage);
      const label = nativeName;
      return (
        <option value={value} selected={supportedLanguage === currentLanguage}>
          {label}
        </option>
      );
    })
  }
</select>

<style>
  @media screen and (min-width: 672px) {
    select {
      position: absolute;
      top: 0;
      left: 0;
      margin: 16px 16px 0 0;
    }
  }

  @media screen and (max-width: 672px) {
    select {
      position: absolute;
      top: 16px;
      right: 0;
      margin: 0 0 0 16px;
    }
  }
</style>
